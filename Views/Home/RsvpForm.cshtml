@model PartyInvites.Models.GuestResponse //The @model expression specifies that the view expects to receive a GuestResponse object as its view model. Each element is associated with the model property using the asp-for attribute, which is another tag helper attribute.
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>RsvpForm</title>
</head>
<body>
    <form asp-action="RsvpForm" method="post">
        <div asp-validation-summary="All"></div> <!--The asp-validation-summary attribute is another tag helper attribute that generates HTML that displays any validation errors that have been detected. The value of the attribute is used to configure the type of validation summary that is generated. In this case, the value of All indicates that the summary should display all errors that have been detected. The summary is generated using the ValidationSummary tag helper, which is defined in the Microsoft.AspNetCore.Mvc.TagHelpers assembly.-->
        <div>
            <label asp-for="Name">Your name:</label>
            <input asp-for="Name" /> <!--The asp-for (tag helper) attribute configures the elements to tie them to the view model object
                Here is an example of the HTML that the tag helpers produce:
                <p>
                    <label for="Name">Your name:</label>
                    <input type="text" id="Name" name="Name" value="">
                </p>
                            The asp-for attribute on the label element sets the value of the -for attribute. The asp-for attribute on
            the input element sets the id and name elements. This may not look especially useful, but you will see that
            associating elements with a model property offers additional advantages as the application functionality is
            defined.
                        Of more immediate use is the asp-action attribute applied to the form element, which uses the application’s
            URL routing configuration to set the action attribute to a URL that will target a specific action method, like this:
            <form method="post" action="/Home/RsvpForm">
            
            As with the helper attribute I applied to the a element, the benefit of this approach is that when you can
            change the system of URLs that the application uses, the content generated by the tag helpers will reflect the
            changes automatically.-->
        </div>
        <div>
            <label asp-for="Email">Your email:</label>
            <input asp-for="Email" />
        </div>
        <div>
            <label asp-for="Phone">Your phone:</label>
            <input asp-for="Phone" />
        </div>
        <div>
            <label asp-for="WillAttend">Will you attend?</label>
            <select asp-for="WillAttend">
                <option value="">Choose an option</option>
                <option value="true">Yes, I'll be there</option>
                <option value="false">No, I can't come</option>
            </select>
        </div>
        <button type="submit">Submit</button>
    </form>
</body>
</html>